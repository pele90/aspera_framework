#define MAX_NUM_LIGHTS 2

//////////////
// TEXTURES //
//////////////
Texture2D shaderTexture : register(t0);

Texture2D depthMapTexture[2] : register(t1);

///////////////////
// SAMPLE STATES //
///////////////////

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);


//////////////////////
// CONSTANT BUFFERS //
//////////////////////
struct PointLight
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightPosition;
	float padding;
};

cbuffer LightBuffer
{
	PointLight lights[MAX_NUM_LIGHTS];
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 lightViewPosition[2] : TEXCOORD2;
    float3 lightPos[2] : TEXCOORD4;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ShadowPixelShader(PixelInputType input) : SV_TARGET
{
    float bias;
    float4 color;
    float2 projectTexCoord;
    float depthValue;
    float lightDepthValue;
    float lightIntensity;
    float4 textureColor;

	// Set the bias value for fixing the floating point precision issues.
    bias = 0.00001f;

    // Set the default output color to the ambient light value for all pixels.
    color = lights[0].ambientColor;

	[unroll]
	for( uint i = 0;i < 2; i++ )
	{
		// Calculate the projected texture coordinates.
		projectTexCoord.x =  input.lightViewPosition[i].x / input.lightViewPosition[i].w / 2.0f + 0.5f;
		projectTexCoord.y = -input.lightViewPosition[i].y / input.lightViewPosition[i].w / 2.0f + 0.5f;

		// Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
		if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
		{
			// Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
			depthValue = depthMapTexture[i].Sample(SampleTypeClamp, projectTexCoord).r;

			// Calculate the depth of the light.
			lightDepthValue = input.lightViewPosition[i].z / input.lightViewPosition[i].w;

			// Subtract the bias from the lightDepthValue.
			lightDepthValue = lightDepthValue - bias;

			// Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
			// If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
			if(lightDepthValue < depthValue)
			{

			// Calculate the amount of light on this pixel.
				lightIntensity = saturate(dot(input.normal, input.lightPos[i]));

				if(lightIntensity > 0.0f)
				{
					// Determine the final diffuse color based on the diffuse color and the amount of light intensity.
					color += (lights[i].diffuseColor * lightIntensity);

					// Saturate the final light color.
					color = saturate(color);
				}
			}
		}
	}

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleTypeWrap, input.tex);

    // Combine the light and texture color.
    color = color * textureColor;

    return color;
}